<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConstraintViolationNoLeadingOrTrailingWhitespace" xml:space="preserve">
    <value>The property value is invalid. The value can't contain leading or trailing whitespace.</value>
  </data>
  <data name="ErrorEdbFileCannotBeTmp" xml:space="preserve">
    <value>"{0}"isn't a valid .edb file path. Also, the .edb file path can't be "tmp.edb", which is reserved for use by Exchange.</value>
  </data>
  <data name="ErrorEdbFileCannotBeUncPath" xml:space="preserve">
    <value>The specified file name is not a valid database file path. You cannot use a UNC path as part of the database file name. Specified database  filename: "{0}".</value>
  </data>
  <data name="ErrorEdbFileNameTooLong" xml:space="preserve">
    <value>The length of the file name '{0}' is too long.</value>
  </data>
  <data name="ErrorEdbFilePathCannotConvert" xml:space="preserve">
    <value>"{0}" isn't a valid .edb file path. The .edb file can't be saved in the root directory. Make sure the file path ends with ".edb".</value>
  </data>
  <data name="ErrorFilePathMismatchExpectedExtension" xml:space="preserve">
    <value>File path "{0}" does not match the expected file extension "{1}".</value>
  </data>
  <data name="ErrorInvalidExtension" xml:space="preserve">
    <value>The file extension '{0}' is not in a valid format.</value>
  </data>
  <data name="ErrorInvalidFullyQualifiedFileName" xml:space="preserve">
    <value>The specified path '{0}' is not a valid fully qualified file name.</value>
  </data>
  <data name="ErrorLocalLongFullAsciiPathCannotConvert" xml:space="preserve">
    <value>"{0}" is not an acceptable path. An acceptable path is absolute, local, long file path, and does not contain '~' and non-ASCII characters.</value>
  </data>
  <data name="ErrorLocalLongFullPathCannotConvert" xml:space="preserve">
    <value>"{0}" is not an acceptable path. You must use an absolute, local, long file path, that does not contain '~'.</value>
  </data>
  <data name="ErrorLocalLongFullPathTooLong" xml:space="preserve">
    <value>The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters. Directory names must be less than 248 characters. The path specified: {0}</value>
  </data>
  <data name="ErrorLongPathCannotConvert" xml:space="preserve">
    <value>"{0}" is not an acceptable path. You must use an absolute, local, long file path, that doesn't contain '~', or a UNC path.</value>
  </data>
  <data name="ErrorPathCanNotBeRoot" xml:space="preserve">
    <value>The path cannot be the root directory.</value>
  </data>
  <data name="ErrorStmFilePathCannotConvert" xml:space="preserve">
    <value>"{0}" is not a valid Stm file path. Note that Stm file can not be saved in the root directory.</value>
  </data>
  <data name="ErrorUncPathMustBeUncPath" xml:space="preserve">
    <value>"{0}" isn't a valid UNC path.</value>
  </data>
  <data name="ErrorUncPathMustBeUncPathOnly" xml:space="preserve">
    <value>"{0}" is not a valid UNC path. You must use the following format: '\\server\share'</value>
  </data>
  <data name="ErrorUncPathMustUseServerName" xml:space="preserve">
    <value>"{0}" is not a valid share for use as a file share witness. Please specify the server name instead of the IP address in the UNC path.</value>
  </data>
  <data name="ErrorUncPathTooLong" xml:space="preserve">
    <value>The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters. The path specified: {0}</value>
  </data>
</root>