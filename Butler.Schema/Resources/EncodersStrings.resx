<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BinHexDecoderBadCrc" xml:space="preserve">
    <value>Invalid data supplied to BinHex decoder: data CRC is invalid.</value>
  </data>
  <data name="BinHexDecoderBadResourceForkCrc" xml:space="preserve">
    <value>Invalid data supplied to BinHex decoder: resource fork CRC is invalid.</value>
  </data>
  <data name="BinHexDecoderDataCorrupt" xml:space="preserve">
    <value>Invalid data supplied to BinHex decoder.</value>
  </data>
  <data name="BinHexDecoderFileNameTooLong" xml:space="preserve">
    <value>Invalid data supplied to BinHex decoder: file name length in the header is too big.</value>
  </data>
  <data name="BinHexDecoderFirstNonWhitespaceMustBeColon" xml:space="preserve">
    <value>Invalid data supplied to BinHex decoder: first non-whitespace byte after the preamble is not ':'.</value>
  </data>
  <data name="BinHexDecoderFoundInvalidCharacter" xml:space="preserve">
    <value>Invalid data supplied to BinHex decoder: invalid character.</value>
  </data>
  <data name="BinHexDecoderInternalError" xml:space="preserve">
    <value>Unexpected BinHex decoder state.</value>
  </data>
  <data name="BinHexDecoderLineCorrupt" xml:space="preserve">
    <value>Invalid data line supplied to BinHex decoder.</value>
  </data>
  <data name="BinHexDecoderLineTooLong" xml:space="preserve">
    <value>Invalid data supplied to BinHex decoder: line is too long.</value>
  </data>
  <data name="BinHexEncoderDataCorruptCannotFinishEncoding" xml:space="preserve">
    <value>Invalid data supplied to BinHex encoder: not enough data; encoding cannot complete. Check whether fork length in MACBINARY this.header matches actual data length.</value>
  </data>
  <data name="BinHexEncoderDoesNotSupportResourceFork" xml:space="preserve">
    <value>BinHex encoder does not support a method to specify the resource fork data.</value>
  </data>
  <data name="BinHexEncoderInternalError" xml:space="preserve">
    <value>Internal error in BinHex encoder.</value>
  </data>
  <data name="BinHexHeaderBadFileNameLength" xml:space="preserve">
    <value>File name length must be between one and sixty-three bytes.</value>
  </data>
  <data name="BinHexHeaderIncomplete" xml:space="preserve">
    <value>BinHex header incomplete array fragment.</value>
  </data>
  <data name="BinHexHeaderInvalidCrc" xml:space="preserve">
    <value>BinHex header data is corrupt. Invalid CRC.</value>
  </data>
  <data name="BinHexHeaderInvalidNameLength" xml:space="preserve">
    <value>BinHex header data corrupted. Invalid name length.</value>
  </data>
  <data name="BinHexHeaderTooSmall" xml:space="preserve">
    <value>Header must be at least 23 bytes long.</value>
  </data>
  <data name="BinHexHeaderUnsupportedVersion" xml:space="preserve">
    <value>BinHex header unsupported version value.</value>
  </data>
  <data name="EncStrCannotCloneChildStream" xml:space="preserve">
    <value>Can't clone this stream because wrapped stream of type {0} doesn't support ICloneableStream interface and cannot seek.</value>
  </data>
  <data name="EncStrCannotCloneWriteableStream" xml:space="preserve">
    <value>Cloning of write access encoder stream is not supported.</value>
  </data>
  <data name="EncStrCannotRead" xml:space="preserve">
    <value>This stream does not support reading.</value>
  </data>
  <data name="EncStrCannotSeek" xml:space="preserve">
    <value>This stream does not support seeking.</value>
  </data>
  <data name="EncStrCannotWrite" xml:space="preserve">
    <value>This stream doesn't support writing.</value>
  </data>
  <data name="EncStrLengthExceeded" xml:space="preserve">
    <value>The sum of offset and count ({0}) is larger than the array length ({1}).</value>
  </data>
  <data name="MacBinBadVersion" xml:space="preserve">
    <value>Version must be one of the following values: 0, 129, 130.</value>
  </data>
  <data name="MacBinFileNameTooLong" xml:space="preserve">
    <value>File name is too long to fit into Mac binary header structure.</value>
  </data>
  <data name="MacBinHeaderMustBe128Long" xml:space="preserve">
    <value>Mac binary header must be 128 bytes long.</value>
  </data>
  <data name="MacBinIconOffsetTooLarge" xml:space="preserve">
    <value>Icon offset must be within the range 0 to {0}.</value>
  </data>
  <data name="MacBinInvalidData" xml:space="preserve">
    <value>Invalid Mac binary header data.</value>
  </data>
  <data name="QPEncoderNoSpaceForLineBreak" xml:space="preserve">
    <value>Internal error: no space on the line for soft line break.</value>
  </data>
  <data name="ThisEncoderDoesNotSupportCloning" xml:space="preserve">
    <value>ByteEncoder of type {0} does not support cloning.</value>
  </data>
  <data name="UUDecoderInvalidData" xml:space="preserve">
    <value>Invalid data supplied to UU decoder.</value>
  </data>
  <data name="UUDecoderInvalidDataBadLine" xml:space="preserve">
    <value>Invalid data supplied to UU decoder: line integrity check failed.</value>
  </data>
  <data name="UUEncoderFileNameTooLong" xml:space="preserve">
    <value>Value can't be longer than {0} characters.</value>
  </data>
</root>